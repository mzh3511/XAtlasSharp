/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_XAtlas(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_XAtlas(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_XAtlas(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include <stdint.h>		// Use the C99 official header


#include <cstdarg>

/* Helper callback to solve PInvoke with va_list */
typedef int (*xatlasPrintFuncHelper)(const char *);
static xatlasPrintFuncHelper XAtlas_PrintFuncHelper_callback = NULL;
static int XAtlas_PrintFuncHelper(const char *format, ...)
{
    if (XAtlas_PrintFuncHelper_callback)
    {
        char buffer[256];
        va_list args;
        va_start (args, format);
        vsprintf (buffer,format, args);
        va_end (args);
        return XAtlas_PrintFuncHelper_callback((const char *)SWIG_csharp_string_callback(buffer));
    }

    return 0;
}


#include "xatlas.h"


#ifdef __cplusplus
extern "C" {
#endif


/* Helper methods to get struct sizes */
SWIGEXPORT size_t SWIGSTDCALL GetChartSize()
{
    return sizeof(xatlas::Chart);
}
SWIGEXPORT size_t SWIGSTDCALL GetVertexSize()
{
    return sizeof(xatlas::Vertex);
}
SWIGEXPORT size_t SWIGSTDCALL GetMeshSize()
{
    return sizeof(xatlas::Mesh);
}

SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_GetChartSize() {
  int jresult ;
  int result;
  
  result = (int)GetChartSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_GetVertexSize() {
  int jresult ;
  int result;
  
  result = (int)GetVertexSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_GetMeshSize() {
  int jresult ;
  int result;
  
  result = (int)GetMeshSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Chart_Faces_set(void * jarg1, void * jarg2) {
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  
  arg1 = (xatlas::Chart *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  if (arg1) (arg1)->faceArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_Chart_Faces_get(void * jarg1) {
  void * jresult ;
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (xatlas::Chart *)jarg1; 
  result = (uint32_t *) ((arg1)->faceArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Chart_AtlasIndex_set(void * jarg1, unsigned int jarg2) {
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Chart *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->atlasIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Chart_AtlasIndex_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Chart *)jarg1; 
  result = (uint32_t) ((arg1)->atlasIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Chart_FaceCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Chart *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->faceCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Chart_FaceCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Chart *)jarg1; 
  result = (uint32_t) ((arg1)->faceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Chart_Type_set(void * jarg1, int jarg2) {
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  xatlas::ChartType arg2 ;
  
  arg1 = (xatlas::Chart *)jarg1; 
  arg2 = (xatlas::ChartType)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_Chart_Type_get(void * jarg1) {
  int jresult ;
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  xatlas::ChartType result;
  
  arg1 = (xatlas::Chart *)jarg1; 
  result = (xatlas::ChartType) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Chart_Material_set(void * jarg1, unsigned int jarg2) {
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Chart *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Chart_Material_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Chart *)jarg1; 
  result = (uint32_t) ((arg1)->material);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_delete_Chart(void * jarg1) {
  xatlas::Chart *arg1 = (xatlas::Chart *) 0 ;
  
  arg1 = (xatlas::Chart *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Vertex_AtlasIndex_set(void * jarg1, int jarg2) {
  xatlas::Vertex *arg1 = (xatlas::Vertex *) 0 ;
  int32_t arg2 ;
  
  arg1 = (xatlas::Vertex *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->atlasIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_Vertex_AtlasIndex_get(void * jarg1) {
  int jresult ;
  xatlas::Vertex *arg1 = (xatlas::Vertex *) 0 ;
  int32_t result;
  
  arg1 = (xatlas::Vertex *)jarg1; 
  result = (int32_t) ((arg1)->atlasIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Vertex_ChartIndex_set(void * jarg1, int jarg2) {
  xatlas::Vertex *arg1 = (xatlas::Vertex *) 0 ;
  int32_t arg2 ;
  
  arg1 = (xatlas::Vertex *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->chartIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_Vertex_ChartIndex_get(void * jarg1) {
  int jresult ;
  xatlas::Vertex *arg1 = (xatlas::Vertex *) 0 ;
  int32_t result;
  
  arg1 = (xatlas::Vertex *)jarg1; 
  result = (int32_t) ((arg1)->chartIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Vertex_Uv_set(void * jarg1, float * jarg2) {
  xatlas::Vertex *arg1 = (xatlas::Vertex *) 0 ;
  float *arg2 ;
  
  arg1 = (xatlas::Vertex *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->uv;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT float * SWIGSTDCALL CSharp_XAtlasSharp_Vertex_Uv_get(void * jarg1) {
  float * jresult ;
  xatlas::Vertex *arg1 = (xatlas::Vertex *) 0 ;
  float *result = 0 ;
  
  arg1 = (xatlas::Vertex *)jarg1; 
  result = (float *)(float *) ((arg1)->uv);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Vertex_Xref_set(void * jarg1, unsigned int jarg2) {
  xatlas::Vertex *arg1 = (xatlas::Vertex *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Vertex *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->xref = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Vertex_Xref_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Vertex *arg1 = (xatlas::Vertex *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Vertex *)jarg1; 
  result = (uint32_t) ((arg1)->xref);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_delete_Vertex(void * jarg1) {
  xatlas::Vertex *arg1 = (xatlas::Vertex *) 0 ;
  
  arg1 = (xatlas::Vertex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_Mesh_Charts_get(void * jarg1) {
  void * jresult ;
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  xatlas::Chart *result = 0 ;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  result = (xatlas::Chart *) ((arg1)->chartArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Mesh_Indices_set(void * jarg1, void * jarg2) {
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  if (arg1) (arg1)->indexArray = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_Mesh_Indices_get(void * jarg1) {
  void * jresult ;
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  result = (uint32_t *) ((arg1)->indexArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_Mesh_Vertices_get(void * jarg1) {
  void * jresult ;
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  xatlas::Vertex *result = 0 ;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  result = (xatlas::Vertex *) ((arg1)->vertexArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Mesh_ChartCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->chartCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Mesh_ChartCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  result = (uint32_t) ((arg1)->chartCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Mesh_IndexCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->indexCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Mesh_IndexCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  result = (uint32_t) ((arg1)->indexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Mesh_VertexCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vertexCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Mesh_VertexCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  result = (uint32_t) ((arg1)->vertexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_delete_Mesh(void * jarg1) {
  xatlas::Mesh *arg1 = (xatlas::Mesh *) 0 ;
  
  arg1 = (xatlas::Mesh *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_KImageChartIndexMask_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)(uint32_t)xatlas::kImageChartIndexMask;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_KImageHasChartIndexBit_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)(uint32_t)xatlas::kImageHasChartIndexBit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_KImageIsBilinearBit_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)(uint32_t)xatlas::kImageIsBilinearBit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_KImageIsPaddingBit_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)(uint32_t)xatlas::kImageIsPaddingBit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Atlas_Image_set(void * jarg1, void * jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  if (arg1) (arg1)->image = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_Atlas_Image_get(void * jarg1) {
  void * jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  result = (uint32_t *) ((arg1)->image);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_Atlas_Meshes_get(void * jarg1) {
  void * jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::Mesh *result = 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  result = (xatlas::Mesh *) ((arg1)->meshes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Atlas_Utilization_set(void * jarg1, void * jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  float *arg2 = (float *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (float *)jarg2; 
  if (arg1) (arg1)->utilization = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_Atlas_Utilization_get(void * jarg1) {
  void * jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  float *result = 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  result = (float *) ((arg1)->utilization);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Atlas_Width_set(void * jarg1, unsigned int jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Atlas_Width_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  result = (uint32_t) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Atlas_Height_set(void * jarg1, unsigned int jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Atlas_Height_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  result = (uint32_t) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Atlas_AtlasCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->atlasCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Atlas_AtlasCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  result = (uint32_t) ((arg1)->atlasCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Atlas_ChartCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->chartCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Atlas_ChartCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  result = (uint32_t) ((arg1)->chartCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Atlas_MeshCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->meshCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_Atlas_MeshCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  result = (uint32_t) ((arg1)->meshCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Atlas_TexelsPerUnit_set(void * jarg1, float jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->texelsPerUnit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_Atlas_TexelsPerUnit_get(void * jarg1) {
  float jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  float result;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  result = (float) ((arg1)->texelsPerUnit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_delete_Atlas(void * jarg1) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_Create() {
  void * jresult ;
  xatlas::Atlas *result = 0 ;
  
  result = (xatlas::Atlas *)xatlas::Create();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Destroy(void * jarg1) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  xatlas::Destroy(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexPositionData_set(void * jarg1, void * jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->vertexPositionData = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexPositionData_get(void * jarg1) {
  void * jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  void *result = 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (void *) ((arg1)->vertexPositionData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexNormalData_set(void * jarg1, void * jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->vertexNormalData = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexNormalData_get(void * jarg1) {
  void * jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  void *result = 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (void *) ((arg1)->vertexNormalData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexUvData_set(void * jarg1, void * jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->vertexUvData = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexUvData_get(void * jarg1) {
  void * jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  void *result = 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (void *) ((arg1)->vertexUvData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_IndexData_set(void * jarg1, void * jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->indexData = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_IndexData_get(void * jarg1) {
  void * jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  void *result = 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (void *) ((arg1)->indexData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_FaceIgnoreData_set(void * jarg1, void * jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  bool *arg2 = (bool *) 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (bool *)jarg2; 
  if (arg1) (arg1)->faceIgnoreData = (bool const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_FaceIgnoreData_get(void * jarg1) {
  void * jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  bool *result = 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (bool *) ((arg1)->faceIgnoreData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_FaceMaterialData_set(void * jarg1, void * jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  if (arg1) (arg1)->faceMaterialData = (uint32_t const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_FaceMaterialData_get(void * jarg1) {
  void * jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (uint32_t *) ((arg1)->faceMaterialData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_FaceVertexCount_set(void * jarg1, void * jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  if (arg1) (arg1)->faceVertexCount = (uint8_t const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_FaceVertexCount_get(void * jarg1) {
  void * jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (uint8_t *) ((arg1)->faceVertexCount);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vertexCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (uint32_t) ((arg1)->vertexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexPositionStride_set(void * jarg1, unsigned int jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vertexPositionStride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexPositionStride_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (uint32_t) ((arg1)->vertexPositionStride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexNormalStride_set(void * jarg1, unsigned int jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vertexNormalStride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexNormalStride_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (uint32_t) ((arg1)->vertexNormalStride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexUvStride_set(void * jarg1, unsigned int jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vertexUvStride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_VertexUvStride_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (uint32_t) ((arg1)->vertexUvStride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_IndexCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->indexCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_IndexCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (uint32_t) ((arg1)->indexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_IndexOffset_set(void * jarg1, int jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  int32_t arg2 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->indexOffset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_IndexOffset_get(void * jarg1) {
  int jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  int32_t result;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (int32_t) ((arg1)->indexOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_FaceCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->faceCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_FaceCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (uint32_t) ((arg1)->faceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_IndexFormat_set(void * jarg1, int jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  xatlas::IndexFormat arg2 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (xatlas::IndexFormat)jarg2; 
  if (arg1) (arg1)->indexFormat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_IndexFormat_get(void * jarg1) {
  int jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  xatlas::IndexFormat result;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (xatlas::IndexFormat) ((arg1)->indexFormat);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_Epsilon_set(void * jarg1, float jarg2) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->epsilon = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_MeshDecl_Epsilon_get(void * jarg1) {
  float jresult ;
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  float result;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  result = (float) ((arg1)->epsilon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_new_MeshDecl() {
  void * jresult ;
  xatlas::MeshDecl *result = 0 ;
  
  result = (xatlas::MeshDecl *)new xatlas::MeshDecl();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_delete_MeshDecl(void * jarg1) {
  xatlas::MeshDecl *arg1 = (xatlas::MeshDecl *) 0 ;
  
  arg1 = (xatlas::MeshDecl *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_AddMesh__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::MeshDecl *arg2 = 0 ;
  uint32_t arg3 ;
  xatlas::AddMeshError result;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (xatlas::MeshDecl *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "xatlas::MeshDecl const & type is null", 0);
    return 0;
  } 
  arg3 = (uint32_t)jarg3; 
  result = (xatlas::AddMeshError)xatlas::AddMesh(arg1,(xatlas::MeshDecl const &)*arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_AddMesh__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::MeshDecl *arg2 = 0 ;
  xatlas::AddMeshError result;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (xatlas::MeshDecl *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "xatlas::MeshDecl const & type is null", 0);
    return 0;
  } 
  result = (xatlas::AddMeshError)xatlas::AddMesh(arg1,(xatlas::MeshDecl const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_AddMeshJoin(void * jarg1) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  xatlas::AddMeshJoin(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_VertexUvData_set(void * jarg1, void * jarg2) {
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->vertexUvData = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_VertexUvData_get(void * jarg1) {
  void * jresult ;
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  void *result = 0 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  result = (void *) ((arg1)->vertexUvData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_IndexData_set(void * jarg1, void * jarg2) {
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->indexData = (void const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_IndexData_get(void * jarg1) {
  void * jresult ;
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  void *result = 0 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  result = (void *) ((arg1)->indexData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_FaceMaterialData_set(void * jarg1, void * jarg2) {
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  uint32_t *arg2 = (uint32_t *) 0 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  if (arg1) (arg1)->faceMaterialData = (uint32_t const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_FaceMaterialData_get(void * jarg1) {
  void * jresult ;
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  result = (uint32_t *) ((arg1)->faceMaterialData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_VertexCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vertexCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_VertexCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  result = (uint32_t) ((arg1)->vertexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_VertexStride_set(void * jarg1, unsigned int jarg2) {
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->vertexStride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_VertexStride_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  result = (uint32_t) ((arg1)->vertexStride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_IndexCount_set(void * jarg1, unsigned int jarg2) {
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->indexCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_IndexCount_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  result = (uint32_t) ((arg1)->indexCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_IndexOffset_set(void * jarg1, int jarg2) {
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  int32_t arg2 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->indexOffset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_IndexOffset_get(void * jarg1) {
  int jresult ;
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  int32_t result;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  result = (int32_t) ((arg1)->indexOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_IndexFormat_set(void * jarg1, int jarg2) {
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  xatlas::IndexFormat arg2 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  arg2 = (xatlas::IndexFormat)jarg2; 
  if (arg1) (arg1)->indexFormat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_UvMeshDecl_IndexFormat_get(void * jarg1) {
  int jresult ;
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  xatlas::IndexFormat result;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  result = (xatlas::IndexFormat) ((arg1)->indexFormat);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_new_UvMeshDecl() {
  void * jresult ;
  xatlas::UvMeshDecl *result = 0 ;
  
  result = (xatlas::UvMeshDecl *)new xatlas::UvMeshDecl();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_delete_UvMeshDecl(void * jarg1) {
  xatlas::UvMeshDecl *arg1 = (xatlas::UvMeshDecl *) 0 ;
  
  arg1 = (xatlas::UvMeshDecl *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XAtlasSharp_AddUvMesh(void * jarg1, void * jarg2) {
  int jresult ;
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::UvMeshDecl *arg2 = 0 ;
  xatlas::AddMeshError result;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (xatlas::UvMeshDecl *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "xatlas::UvMeshDecl const & type is null", 0);
    return 0;
  } 
  result = (xatlas::AddMeshError)xatlas::AddUvMesh(arg1,(xatlas::UvMeshDecl const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_ParamFunc_set(void * jarg1, void* jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  xatlas::ParameterizeFunc arg2 = (xatlas::ParameterizeFunc) 0 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (xatlas::ParameterizeFunc)jarg2; 
  if (arg1) (arg1)->paramFunc = arg2;
}


SWIGEXPORT void* SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_ParamFunc_get(void * jarg1) {
  void* jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  xatlas::ParameterizeFunc result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (xatlas::ParameterizeFunc) ((arg1)->paramFunc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_MaxChartArea_set(void * jarg1, float jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxChartArea = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_MaxChartArea_get(void * jarg1) {
  float jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (float) ((arg1)->maxChartArea);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_MaxBoundaryLength_set(void * jarg1, float jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxBoundaryLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_MaxBoundaryLength_get(void * jarg1) {
  float jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (float) ((arg1)->maxBoundaryLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_NormalDeviationWeight_set(void * jarg1, float jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->normalDeviationWeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_NormalDeviationWeight_get(void * jarg1) {
  float jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (float) ((arg1)->normalDeviationWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_RoundnessWeight_set(void * jarg1, float jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->roundnessWeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_RoundnessWeight_get(void * jarg1) {
  float jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (float) ((arg1)->roundnessWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_StraightnessWeight_set(void * jarg1, float jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->straightnessWeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_StraightnessWeight_get(void * jarg1) {
  float jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (float) ((arg1)->straightnessWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_NormalSeamWeight_set(void * jarg1, float jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->normalSeamWeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_NormalSeamWeight_get(void * jarg1) {
  float jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (float) ((arg1)->normalSeamWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_TextureSeamWeight_set(void * jarg1, float jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->textureSeamWeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_TextureSeamWeight_get(void * jarg1) {
  float jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (float) ((arg1)->textureSeamWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_MaxCost_set(void * jarg1, float jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxCost = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_MaxCost_get(void * jarg1) {
  float jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  float result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (float) ((arg1)->maxCost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_MaxIterations_set(void * jarg1, unsigned int jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->maxIterations = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_MaxIterations_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (uint32_t) ((arg1)->maxIterations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_UseInputMeshUvs_set(void * jarg1, unsigned int jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useInputMeshUvs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_UseInputMeshUvs_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  bool result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (bool) ((arg1)->useInputMeshUvs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_FixWinding_set(void * jarg1, unsigned int jarg2) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fixWinding = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_ChartOptions_FixWinding_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  bool result;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  result = (bool) ((arg1)->fixWinding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_new_ChartOptions() {
  void * jresult ;
  xatlas::ChartOptions *result = 0 ;
  
  result = (xatlas::ChartOptions *)new xatlas::ChartOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_delete_ChartOptions(void * jarg1) {
  xatlas::ChartOptions *arg1 = (xatlas::ChartOptions *) 0 ;
  
  arg1 = (xatlas::ChartOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ComputeCharts__SWIG_0(void * jarg1, void * jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::ChartOptions arg2 ;
  xatlas::ChartOptions *argp2 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  argp2 = (xatlas::ChartOptions *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null xatlas::ChartOptions", 0);
    return ;
  }
  arg2 = *argp2; 
  xatlas::ComputeCharts(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_ComputeCharts__SWIG_1(void * jarg1) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  xatlas::ComputeCharts(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_MaxChartSize_set(void * jarg1, unsigned int jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->maxChartSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_MaxChartSize_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (uint32_t) ((arg1)->maxChartSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_Padding_set(void * jarg1, unsigned int jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->padding = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_Padding_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (uint32_t) ((arg1)->padding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_TexelsPerUnit_set(void * jarg1, float jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  float arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->texelsPerUnit = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_TexelsPerUnit_get(void * jarg1) {
  float jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  float result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (float) ((arg1)->texelsPerUnit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_Resolution_set(void * jarg1, unsigned int jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->resolution = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_Resolution_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  uint32_t result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (uint32_t) ((arg1)->resolution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_Bilinear_set(void * jarg1, unsigned int jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bilinear = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_Bilinear_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (bool) ((arg1)->bilinear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_BlockAlign_set(void * jarg1, unsigned int jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->blockAlign = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_BlockAlign_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (bool) ((arg1)->blockAlign);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_BruteForce_set(void * jarg1, unsigned int jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bruteForce = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_BruteForce_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (bool) ((arg1)->bruteForce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_CreateImage_set(void * jarg1, unsigned int jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->createImage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_CreateImage_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (bool) ((arg1)->createImage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_RotateChartsToAxis_set(void * jarg1, unsigned int jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rotateChartsToAxis = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_RotateChartsToAxis_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (bool) ((arg1)->rotateChartsToAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_RotateCharts_set(void * jarg1, unsigned int jarg2) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rotateCharts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XAtlasSharp_PackOptions_RotateCharts_get(void * jarg1) {
  unsigned int jresult ;
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  bool result;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  result = (bool) ((arg1)->rotateCharts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XAtlasSharp_new_PackOptions() {
  void * jresult ;
  xatlas::PackOptions *result = 0 ;
  
  result = (xatlas::PackOptions *)new xatlas::PackOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_delete_PackOptions(void * jarg1) {
  xatlas::PackOptions *arg1 = (xatlas::PackOptions *) 0 ;
  
  arg1 = (xatlas::PackOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackCharts__SWIG_0(void * jarg1, void * jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::PackOptions arg2 ;
  xatlas::PackOptions *argp2 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  argp2 = (xatlas::PackOptions *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null xatlas::PackOptions", 0);
    return ;
  }
  arg2 = *argp2; 
  xatlas::PackCharts(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_PackCharts__SWIG_1(void * jarg1) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  xatlas::PackCharts(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Generate__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::ChartOptions arg2 ;
  xatlas::PackOptions arg3 ;
  xatlas::ChartOptions *argp2 ;
  xatlas::PackOptions *argp3 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  argp2 = (xatlas::ChartOptions *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null xatlas::ChartOptions", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (xatlas::PackOptions *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null xatlas::PackOptions", 0);
    return ;
  }
  arg3 = *argp3; 
  xatlas::Generate(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Generate__SWIG_1(void * jarg1, void * jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::ChartOptions arg2 ;
  xatlas::ChartOptions *argp2 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  argp2 = (xatlas::ChartOptions *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null xatlas::ChartOptions", 0);
    return ;
  }
  arg2 = *argp2; 
  xatlas::Generate(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_Generate__SWIG_2(void * jarg1) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  xatlas::Generate(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_SetProgressCallback__SWIG_0(void * jarg1, void* jarg2, void * jarg3) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::ProgressFunc arg2 = (xatlas::ProgressFunc) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (xatlas::ProgressFunc)jarg2; 
  arg3 = (void *)jarg3; 
  xatlas::SetProgressCallback(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_SetProgressCallback__SWIG_1(void * jarg1, void* jarg2) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  xatlas::ProgressFunc arg2 = (xatlas::ProgressFunc) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  arg2 = (xatlas::ProgressFunc)jarg2; 
  xatlas::SetProgressCallback(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_SetProgressCallback__SWIG_2(void * jarg1) {
  xatlas::Atlas *arg1 = (xatlas::Atlas *) 0 ;
  
  arg1 = (xatlas::Atlas *)jarg1; 
  xatlas::SetProgressCallback(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_SetAlloc__SWIG_0(void* jarg1, void* jarg2) {
  xatlas::ReallocFunc arg1 = (xatlas::ReallocFunc) 0 ;
  xatlas::FreeFunc arg2 = (xatlas::FreeFunc) 0 ;
  
  arg1 = (xatlas::ReallocFunc)jarg1; 
  arg2 = (xatlas::FreeFunc)jarg2; 
  xatlas::SetAlloc(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_SetAlloc__SWIG_1(void* jarg1) {
  xatlas::ReallocFunc arg1 = (xatlas::ReallocFunc) 0 ;
  
  arg1 = (xatlas::ReallocFunc)jarg1; 
  xatlas::SetAlloc(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XAtlasSharp_SetPrint(void* jarg1, unsigned int jarg2) {
  xatlas::PrintFunc arg1 = (xatlas::PrintFunc) 0 ;
  bool arg2 ;
  
  XAtlas_PrintFuncHelper_callback = (xatlasPrintFuncHelper)jarg1; arg1 = (xatlas::PrintFunc)XAtlas_PrintFuncHelper; 
  arg2 = jarg2 ? true : false; 
  xatlas::SetPrint(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XAtlasSharp_StringForEnum__SWIG_0(int jarg1) {
  char * jresult ;
  xatlas::AddMeshError arg1 ;
  char *result = 0 ;
  
  arg1 = (xatlas::AddMeshError)jarg1; 
  result = (char *)xatlas::StringForEnum(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XAtlasSharp_StringForEnum__SWIG_1(int jarg1) {
  char * jresult ;
  xatlas::ProgressCategory arg1 ;
  char *result = 0 ;
  
  arg1 = (xatlas::ProgressCategory)jarg1; 
  result = (char *)xatlas::StringForEnum(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif


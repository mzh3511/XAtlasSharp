//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XAtlasSharp {

public class ChartOptions : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChartOptions(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChartOptions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChartOptions() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XAtlasPINVOKE.delete_ChartOptions(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public delegate void ParameterizeFuncDelegate(System.IntPtr positions, System.IntPtr texcoords, System.IntPtr vertexCount, System.IntPtr indices, uint indexCount);

  public ParameterizeFuncDelegate ParamFunc {
    set {
      XAtlasPINVOKE.ChartOptions_ParamFunc_set(swigCPtr, value);
    } get => XAtlasPINVOKE.ChartOptions_ParamFunc_get(swigCPtr);
  }

  public float MaxChartArea {
    set {
      XAtlasPINVOKE.ChartOptions_MaxChartArea_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.ChartOptions_MaxChartArea_get(swigCPtr);
      return ret;
    } 
  }

  public float MaxBoundaryLength {
    set {
      XAtlasPINVOKE.ChartOptions_MaxBoundaryLength_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.ChartOptions_MaxBoundaryLength_get(swigCPtr);
      return ret;
    } 
  }

  public float NormalDeviationWeight {
    set {
      XAtlasPINVOKE.ChartOptions_NormalDeviationWeight_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.ChartOptions_NormalDeviationWeight_get(swigCPtr);
      return ret;
    } 
  }

  public float RoundnessWeight {
    set {
      XAtlasPINVOKE.ChartOptions_RoundnessWeight_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.ChartOptions_RoundnessWeight_get(swigCPtr);
      return ret;
    } 
  }

  public float StraightnessWeight {
    set {
      XAtlasPINVOKE.ChartOptions_StraightnessWeight_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.ChartOptions_StraightnessWeight_get(swigCPtr);
      return ret;
    } 
  }

  public float NormalSeamWeight {
    set {
      XAtlasPINVOKE.ChartOptions_NormalSeamWeight_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.ChartOptions_NormalSeamWeight_get(swigCPtr);
      return ret;
    } 
  }

  public float TextureSeamWeight {
    set {
      XAtlasPINVOKE.ChartOptions_TextureSeamWeight_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.ChartOptions_TextureSeamWeight_get(swigCPtr);
      return ret;
    } 
  }

  public float MaxCost {
    set {
      XAtlasPINVOKE.ChartOptions_MaxCost_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.ChartOptions_MaxCost_get(swigCPtr);
      return ret;
    } 
  }

  public uint MaxIterations {
    set {
      XAtlasPINVOKE.ChartOptions_MaxIterations_set(swigCPtr, value);
    } 
    get {
      uint ret = XAtlasPINVOKE.ChartOptions_MaxIterations_get(swigCPtr);
      return ret;
    } 
  }

  public bool UseInputMeshUvs {
    set {
      XAtlasPINVOKE.ChartOptions_UseInputMeshUvs_set(swigCPtr, value);
    } 
    get {
      bool ret = XAtlasPINVOKE.ChartOptions_UseInputMeshUvs_get(swigCPtr);
      return ret;
    } 
  }

  public bool FixWinding {
    set {
      XAtlasPINVOKE.ChartOptions_FixWinding_set(swigCPtr, value);
    } 
    get {
      bool ret = XAtlasPINVOKE.ChartOptions_FixWinding_get(swigCPtr);
      return ret;
    } 
  }

  public ChartOptions() : this(XAtlasPINVOKE.new_ChartOptions(), true) {
  }

}

}

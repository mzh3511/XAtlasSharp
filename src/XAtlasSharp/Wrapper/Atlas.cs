//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XAtlasSharp {

public class Atlas : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Atlas(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Atlas obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Atlas() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XAtlasPINVOKE.delete_Atlas(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static Atlas Create() => XAtlas.Create();
  public void Destroy() => XAtlas.Destroy(this);
  public AddMeshError AddMesh(MeshDecl meshDecl) => XAtlas.AddMesh(this, meshDecl);
  public AddMeshError AddMesh(MeshDecl meshDecl, uint meshCountHint) => XAtlas.AddMesh(this, meshDecl, meshCountHint);
  public void AddMeshJoin() => XAtlas.AddMeshJoin(this);
  public void AddUvMesh(UvMeshDecl decl) => XAtlas.AddUvMesh(this, decl);
  public void ComputeCharts() => XAtlas.ComputeCharts(this);
  public void ComputeCharts(ChartOptions options) => XAtlas.ComputeCharts(this, options);
  public void PackCharts() => XAtlas.PackCharts(this);
  public void PackCharts(PackOptions packOptions) => XAtlas.PackCharts(this, packOptions);
  public void Generate() => XAtlas.Generate(this);
  public void Generate(ChartOptions chartOptions) => XAtlas.Generate(this, chartOptions);
  public void Generate(ChartOptions chartOptions, PackOptions packOptions) => XAtlas.Generate(this, chartOptions, packOptions);
  public void SetProgressCallback(XAtlas.ProgressFuncDelegate progressFunc) => XAtlas.SetProgressCallback(this, progressFunc);
  public void SetProgressCallback(XAtlas.ProgressFuncDelegate progressFunc, System.IntPtr progressUserData) => XAtlas.SetProgressCallback(this, progressFunc, progressUserData);

  public System.IntPtr Image {
    set {
      XAtlasPINVOKE.Atlas_Image_set(swigCPtr, new System.Runtime.InteropServices.HandleRef(null, value));
    } get{System.IntPtr res = XAtlasPINVOKE.Atlas_Image_get(swigCPtr); ; return res;}
  }

  public System.Collections.Generic.IEnumerable<Mesh> Meshes {
      get
      {
          var cPtr = XAtlasPINVOKE.Atlas_Meshes_get(swigCPtr);
          var size = XAtlasPINVOKE.GetMeshSize();
          for (int i = 0; i < MeshCount; i++)
          {
              yield return new Mesh(System.IntPtr.Add(cPtr, size * i), false);
          }
      }
  
  }

  public float[] Utilization {
    set {
      XAtlasPINVOKE.Atlas_Utilization_set(swigCPtr, ref value[0]);
    } 
        get
        {
            var _temp = new float[AtlasCount];
            System.Runtime.InteropServices.Marshal.Copy(XAtlasPINVOKE.Atlas_Utilization_get(swigCPtr), _temp, 0, (int)AtlasCount);
            return _temp;
        }
    
  }

  public uint Width {
    set {
      XAtlasPINVOKE.Atlas_Width_set(swigCPtr, value);
    } 
    get {
      uint ret = XAtlasPINVOKE.Atlas_Width_get(swigCPtr);
      return ret;
    } 
  }

  public uint Height {
    set {
      XAtlasPINVOKE.Atlas_Height_set(swigCPtr, value);
    } 
    get {
      uint ret = XAtlasPINVOKE.Atlas_Height_get(swigCPtr);
      return ret;
    } 
  }

  public uint AtlasCount {
    set {
      XAtlasPINVOKE.Atlas_AtlasCount_set(swigCPtr, value);
    } 
    get {
      uint ret = XAtlasPINVOKE.Atlas_AtlasCount_get(swigCPtr);
      return ret;
    } 
  }

  public uint ChartCount {
    set {
      XAtlasPINVOKE.Atlas_ChartCount_set(swigCPtr, value);
    } 
    get {
      uint ret = XAtlasPINVOKE.Atlas_ChartCount_get(swigCPtr);
      return ret;
    } 
  }

  public uint MeshCount {
    set {
      XAtlasPINVOKE.Atlas_MeshCount_set(swigCPtr, value);
    } 
    get {
      uint ret = XAtlasPINVOKE.Atlas_MeshCount_get(swigCPtr);
      return ret;
    } 
  }

  public float TexelsPerUnit {
    set {
      XAtlasPINVOKE.Atlas_TexelsPerUnit_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.Atlas_TexelsPerUnit_get(swigCPtr);
      return ret;
    } 
  }

}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace XAtlasSharp {

public class PackOptions : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal PackOptions(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PackOptions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PackOptions() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XAtlasPINVOKE.delete_PackOptions(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public uint MaxChartSize {
    set {
      XAtlasPINVOKE.PackOptions_MaxChartSize_set(swigCPtr, value);
    } 
    get {
      uint ret = XAtlasPINVOKE.PackOptions_MaxChartSize_get(swigCPtr);
      return ret;
    } 
  }

  public uint Padding {
    set {
      XAtlasPINVOKE.PackOptions_Padding_set(swigCPtr, value);
    } 
    get {
      uint ret = XAtlasPINVOKE.PackOptions_Padding_get(swigCPtr);
      return ret;
    } 
  }

  public float TexelsPerUnit {
    set {
      XAtlasPINVOKE.PackOptions_TexelsPerUnit_set(swigCPtr, value);
    } 
    get {
      float ret = XAtlasPINVOKE.PackOptions_TexelsPerUnit_get(swigCPtr);
      return ret;
    } 
  }

  public uint Resolution {
    set {
      XAtlasPINVOKE.PackOptions_Resolution_set(swigCPtr, value);
    } 
    get {
      uint ret = XAtlasPINVOKE.PackOptions_Resolution_get(swigCPtr);
      return ret;
    } 
  }

  public bool Bilinear {
    set {
      XAtlasPINVOKE.PackOptions_Bilinear_set(swigCPtr, value);
    } 
    get {
      bool ret = XAtlasPINVOKE.PackOptions_Bilinear_get(swigCPtr);
      return ret;
    } 
  }

  public bool BlockAlign {
    set {
      XAtlasPINVOKE.PackOptions_BlockAlign_set(swigCPtr, value);
    } 
    get {
      bool ret = XAtlasPINVOKE.PackOptions_BlockAlign_get(swigCPtr);
      return ret;
    } 
  }

  public bool BruteForce {
    set {
      XAtlasPINVOKE.PackOptions_BruteForce_set(swigCPtr, value);
    } 
    get {
      bool ret = XAtlasPINVOKE.PackOptions_BruteForce_get(swigCPtr);
      return ret;
    } 
  }

  public bool CreateImage {
    set {
      XAtlasPINVOKE.PackOptions_CreateImage_set(swigCPtr, value);
    } 
    get {
      bool ret = XAtlasPINVOKE.PackOptions_CreateImage_get(swigCPtr);
      return ret;
    } 
  }

  public bool RotateChartsToAxis {
    set {
      XAtlasPINVOKE.PackOptions_RotateChartsToAxis_set(swigCPtr, value);
    } 
    get {
      bool ret = XAtlasPINVOKE.PackOptions_RotateChartsToAxis_get(swigCPtr);
      return ret;
    } 
  }

  public bool RotateCharts {
    set {
      XAtlasPINVOKE.PackOptions_RotateCharts_set(swigCPtr, value);
    } 
    get {
      bool ret = XAtlasPINVOKE.PackOptions_RotateCharts_get(swigCPtr);
      return ret;
    } 
  }

  public PackOptions() : this(XAtlasPINVOKE.new_PackOptions(), true) {
  }

}

}
